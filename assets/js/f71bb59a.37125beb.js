"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[759],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},l="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),l=p(n),y=o,m=l["".concat(c,".").concat(y)]||l[y]||f[y]||a;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=y;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[l]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},8655:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return i},default:function(){return l},frontMatter:function(){return a},metadata:function(){return s},toc:function(){return p}});var r=n(3117),o=(n(7294),n(3905));const a={sidebar_position:1},i="\ud83d\udd27 Specifying default types",s={unversionedId:"intro/types/custom-components-examples",id:"intro/types/custom-components-examples",title:"\ud83d\udd27 Specifying default types",description:"Instead of using useNotification returned by createNotifications() you can default specify types by adding global type declarations.",source:"@site/docs/intro/types/custom-components-examples.md",sourceDirName:"intro/types",slug:"/intro/types/custom-components-examples",permalink:"/react-native-notificated/docs/intro/types/custom-components-examples",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"intro",previous:{title:"\ud83d\udcab Custom transitions",permalink:"/react-native-notificated/docs/intro/animations/custom-transitions"},next:{title:"\ud83c\udd98 Errors handling",permalink:"/react-native-notificated/docs/intro/errors-handling/"}},c={},p=[{value:"You have two ways to provide your types.",id:"you-have-two-ways-to-provide-your-types",level:2}],u={toc:p};function l(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"-specifying-default-types"},"\ud83d\udd27 Specifying default types"),(0,o.kt)("br",null),(0,o.kt)("p",null,"Instead of using ",(0,o.kt)("inlineCode",{parentName:"p"},"useNotification")," returned by ",(0,o.kt)("inlineCode",{parentName:"p"},"createNotifications()")," you can default specify types by adding global type declarations.\nThis will overwrite types of ",(0,o.kt)("inlineCode",{parentName:"p"},"useNotification"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"notify"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"modify"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"remove")," imported from ",(0,o.kt)("inlineCode",{parentName:"p"},"react-native-notificated")),(0,o.kt)("p",null,"To achieve that you need to create a ",(0,o.kt)("inlineCode",{parentName:"p"},"d.ts")," file e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"notificated.d.ts")," with content like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"declare global {\n  namespace Notificated {\n    interface CustomVariants {}\n  }\n}\n")),(0,o.kt)("h2",{id:"you-have-two-ways-to-provide-your-types"},"You have two ways to provide your types."),(0,o.kt)("p",null,"First one assumes that you will prepare them manually like this."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Variant } from 'react-native-notificated'\n\ntype Variants = {\n  variantName: Variant<typeof YourComponent>\n}\n\ndeclare global {\n  namespace Notificated {\n    interface CustomVariants extends Variants {}\n  }\n}\n")),(0,o.kt)("p",null,"Second one assumes that you will use utility type provided by library.\nThis approach assumes that configuration is your source of type. If you change your configuration the types will not require update."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { createNotifications } from 'react-native-notificated'\n\nconst { CustomVariantsTypeHelper } = createNotifications({\n  variants: {\n    variantName: { component: YourComponent },\n  },\n})\n\ntype Variants = typeof CustomVariantsTypeHelper\n\ndeclare global {\n  namespace Notificated {\n    interface CustomVariants extends Variants {}\n  }\n}\n")))}l.isMDXComponent=!0}}]);